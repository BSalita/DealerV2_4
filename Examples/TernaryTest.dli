generate 2000
produce 10
seed 13
title " Checking how to nest ternary tests "
# In C and Perl you can nest the ternary almost indefinitely as in
# Answ = ( cond1 ) ? Var1 :
#        ( cond2 ) ? Var2 :
#         ....
#         ( condn ) ? Varn : DefaultVar
# In Dealerv1 Even this simple statement gives the wrong result
# # Answ = ( cond1 ) ? Var1 :
#          ( cond2 ) ? Var2 : Default
# If cond1 is false it always produces Default as the value of Answ
# Dealerv2 has fixed the original bug and now you can do nesting as in C The followoing code will work with dealerv1 however
# To find the maximum of 4 Values you can do: (Note this returns the value, but not the name of the longest suit)
ls =(  ( spades(west) >= hearts(west) ? spades(west) : hearts(west) ) >=    // if The len of longest Major >=
       ( (diamond(west) >= clubs(west))  ? diamond(west) : clubs(west)) ) ? //    The len of the longest Minor
       ( spades(west) >= hearts(west) ? spades(west) : hearts(west) ) :       // set ls to the len of longest Major
       ( (diamond(west) >= clubs(west) ) ? diamond(west) : clubs(west) )      // else set ls to len of longest Minor

# To find the minimum of 4 Values you can do: (Note this returns the value, but not the name of the shortest suit)
ss = (  ( spades(west) <= hearts(west) ? spades(west) : hearts(west) ) <=    // if The len of shortest Major <=
       ( (diamond(west) <= clubs(west))  ? diamond(west) : clubs(west)) ) ?  //    The len of the shortest Minor
       ( spades(west) <= hearts(west) ? spades(west) : hearts(west) ) :      // set ss to the len of shortest Major
       ( (diamond(west) <= clubs(west) ) ? diamond(west) : clubs(west) )     // else set ss to len of shortest Minor

# But it might be more clear to have intermediate variables
ShortMaj = (spades(west)  <= hearts(west)) ? spades(west)  : hearts(west)
LongMaj  = (spades(west)  >= hearts(west)) ? spades(west)  : hearts(west)
ShortMin = (diamond(west) <= clubs(west) ) ? diamond(west) : clubs(west)
LongMin  = (diamond(west) >= clubs(west) ) ? diamond(west) : clubs(west)

ShortSuit   = (ShortMaj <= ShortMin ) ? ShortMaj : ShortMin
LongSuit    = (LongMaj  >= LongMin )   ? LongMaj : LongMin

# find length of second longest suit, (but not the suit name)
MidLS =( ( hearts(west) ) >=        // if spades is the longest suit, then MidLS is the value of the next longest suit.
       ( (diamond(west) >= clubs(west))  ? diamond(west) : clubs(west)) ) ?
       ( hearts(west) ) :
       ( (diamond(west) >= clubs(west) ) ? diamond(west) : clubs(west) )
MidLH =( ( spades(west) ) >=        // if hearts is the longest suit, then MidLH is the value of the next longest suit.
       ( (diamond(west) >= clubs(west))  ? diamond(west) : clubs(west)) ) ?
       ( spades(west) ) :
       ( (diamond(west) >= clubs(west) ) ? diamond(west) : clubs(west) )

MidLD =( (  clubs(west) ) >=        // if diamonds is the longest suit, then MidLD is the value of the next longest suit.
       ( (spades(west)  >= hearts(west)) ? spades(west)  : hearts(west))) ?
       ( clubs(west)  ) :
       ( (spades(west)  >= hearts(west)) ? spades(west)  : hearts(west))

MidLC =( (  diamond(west) ) >=      // if clubs is the longest suit, then MidLC is the value of the next longest suit.
       ( (spades(west)  >= hearts(west)) ? spades(west)  : hearts(west))) ?
       ( diamonds(west)  ) :
       ( (spades(west)  >= hearts(west)) ? spades(west)  : hearts(west))

# Now we figure out which of MidLS, MidLH, MidLD, or MidLC to use.
L2S =  (spades(west)  == LongSuit ) ? MidLS : 0      // if spades is the longest suit, then L2S is the next longest else L2S is 0
L2D =  (diamond(west) == LongSuit ) ? MidLD : 0
L2H =  (hearts(west)  == LongSuit ) ? MidLH : 0
L2C =  (clubs(west)   == LongSuit ) ? MidLC : -1

# We now find the Maximum of the 4 values L2S, L2H, L2D, L2C -- using temporary variables
L2Maj = (L2S >= L2H) ? L2S : L2H
L2Min = (L2D >= L2C) ? L2D : L2C
L2 = (L2Maj > L2Min) ? L2Maj : L2Min   // L2 is the length of the second longest suit


action
    printrpt (west ,  "SS=",ShortSuit,ss , " LS=", LongSuit,ls , " L2=", L2, " MidLC=", MidLC, " MidLD=",MidLD," MidLH=",MidLH," MidLS=",MidLS ),
